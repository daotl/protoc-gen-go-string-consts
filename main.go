package main

import (
	"log"
	"strconv"
	"strings"

	gengo "google.golang.org/protobuf/cmd/protoc-gen-go/internal_gengo"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"

	"github.com/daotl/protoc-gen-go-string-consts/pbgen"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	gen.SupportedFeatures = gengo.SupportedFeatures
	gen.SupportedEditionsMinimum = descriptorpb.Edition_EDITION_2023
	gen.SupportedEditionsMaximum = descriptorpb.Edition_EDITION_2024

	someEnabled := false
	for _, enum := range file.Enums {
		opts, ok := enum.Desc.Options().(*descriptorpb.EnumOptions)
		if !ok {
			log.Fatalf("invalid options type for enum %s", enum.Desc.FullName())
		}
		if opts == nil {
			continue
		}

		if !proto.HasExtension(opts, pbgen.E_GenerateGoStringConsts) {
			continue
		}

		if enabled, ok := proto.GetExtension(opts, pbgen.E_GenerateGoStringConsts).(bool); !ok {
			log.Fatalf("invalid type for generate_go_string_consts option on enum %s", enum.Desc.FullName())
		} else if enabled {
			someEnabled = true
			break
		}
	}

	if !someEnabled {
		return
	}

	filename := file.GeneratedFilenamePrefix + "_string_consts.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-go. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// 	protoc-gen-go-string-consts v0.1.0")
	g.P("// source: " + file.Proto.GetName())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("// Generated string constants for enums")
	g.P()

	for _, enum := range file.Enums {
		opts, ok := enum.Desc.Options().(*descriptorpb.EnumOptions)
		if !ok {
			log.Fatalf("invalid options type for enum %s", enum.Desc.FullName())
		}
		if opts == nil {
			continue
		}

		if !proto.HasExtension(opts, pbgen.E_GenerateGoStringConsts) {
			continue
		}

		if enabled, ok := proto.GetExtension(opts, pbgen.E_GenerateGoStringConsts).(bool); !ok {
			log.Fatalf("invalid type for generate_go_string_consts option on enum %s", enum.Desc.FullName())
		} else if !enabled {
			continue
		}

		stripNamePrefix := false
		if proto.HasExtension(opts, pbgen.E_GenerateGoStringConstsStripNamePrefix) {
			var ok bool
			if stripNamePrefix, ok = proto.GetExtension(opts,
				pbgen.E_GenerateGoStringConstsStripNamePrefix).(bool); !ok {
				log.Fatalf(
					"invalid type for generate_go_string_consts_strip_name_prefix option on enum %s",
					enum.Desc.FullName(),
				)
			}
		}

		stripValuePrefix := true
		if proto.HasExtension(opts, pbgen.E_GenerateGoStringConstsStripValuePrefix) {
			var ok bool
			if stripValuePrefix, ok = proto.GetExtension(opts,
				pbgen.E_GenerateGoStringConstsStripValuePrefix).(bool); !ok {
				log.Fatalf(
					"invalid type for generate_go_string_consts_strip_value_prefix option on enum %s",
					enum.Desc.FullName(),
				)
			}
		}

		// Generate constants
		prefix := string(enum.Desc.Name()) + "_"
		for _, val := range enum.Values {
			name := string(val.Desc.Name()) // "FOO_A"
			value := name
			if stripNamePrefix {
				name, _ = strings.CutPrefix(name, prefix) // "A"
			}
			if stripValuePrefix {
				value, _ = strings.CutPrefix(value, prefix) // "A"
			}
			g.P("const ", name, " = ", strconv.Quote(value))
		}
		g.P()
	}
}
